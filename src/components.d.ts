/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ArrowPositions, BorderWeights, BreakPoints, CheckBoxVariants, FileUploadIconType, FileUploadStates, GeneralHierarchies, GeneralSizes, OnlineIndicatorStates, StateEnum } from "./models/reusableModels";
export { ArrowPositions, BorderWeights, BreakPoints, CheckBoxVariants, FileUploadIconType, FileUploadStates, GeneralHierarchies, GeneralSizes, OnlineIndicatorStates, StateEnum } from "./models/reusableModels";
export namespace Components {
    interface GbAvatar {
        "icon": 'user';
        "placeholder": boolean;
        "size": GeneralSizes;
        "state": OnlineIndicatorStates;
        "statusIcon": string;
        "text": boolean;
        "weight": BorderWeights;
    }
    interface GbAvatarAddButton {
        "el": HTMLElement;
        "showToolTip": boolean;
        "size": GeneralSizes;
        "state": StateEnum;
    }
    interface GbAvatarContrastInnerBorder {
        "size": GeneralSizes;
        "weight": BorderWeights;
    }
    interface GbAvatarGroup {
        "addMoreButton": boolean;
        "moreUsers": boolean;
        "size": GeneralSizes;
        "state": StateEnum;
        "text": boolean;
    }
    interface GbAvatarLabelGroup {
        "placeholder": boolean;
        "size": GeneralSizes;
        "state": OnlineIndicatorStates;
        "statusIcon": string;
        "text": boolean;
    }
    interface GbAvatarProfilePhoto {
        "icon": string;
        "placeholder": boolean;
        "size": GeneralSizes;
        "text": boolean;
        "verified": boolean;
    }
    interface GbButton {
        "destructive": boolean;
        "hierarchy": GeneralHierarchies;
        "icon": 'default' | 'only';
        "iconLeading": boolean;
        "iconLeadingSwap"?: string;
        "iconTrailing": boolean;
        "iconTrailingSwap"?: string;
        "size": GeneralSizes;
        "state": StateEnum;
    }
    interface GbButtonClose {
        "color": 'primary' | 'information' | 'success' | 'gray' | 'warning' | 'error';
        "size": GeneralSizes;
        "type": 'pill_color' | 'pill_outline' | 'badge_color' | 'badge_modern';
    }
    interface GbBadgeClose {
        "color": GeneralColors;
        "type": 'square' | 'rounded';
    }
    interface GbCheckbox {
        "checked": boolean;
        "indeterminate": boolean;
        "size": GeneralSizes;
        "state": StateEnum;
        "supportingText": boolean;
        "type": CheckBoxVariants;
    }
    interface GbCheckboxBase {
        "checked": boolean;
        "indeterminate": boolean;
        "size": GeneralSizes;
        "state": StateEnum;
        "type": CheckBoxVariants;
    }
    interface GbCheckboxGroup {
        "breakpoint": BreakPoints;
        "icon": string;
        "selected": boolean;
        "size": GeneralSizes;
        "type": 'icon_simple' | 'avatar' | 'payment_icon' | 'radio_button' | 'checkbox';
    }
    interface GbCollapseButton {
        "color": 'grey' | 'white';
        "currentIconDirection": string;
        "isHovered": boolean;
    }
    interface GbFileTypeIcon {
    }
    interface GbFileUpload {
        "buttonState": StateEnum;
        "destructive": boolean;
        "heightSize": GeneralSizes;
        "icon": FileUploadIconType;
        "showLabel": boolean;
        "state": FileUploadStates;
        "type": 'single' | 'multiple';
    }
    interface GbFileUploadItemBase {
        "buttonState": StateEnum;
        "fileType": 'pdf' | 'png' | 'jpg' | 'doc' | 'mp4';
        "heightSize": GeneralSizes;
        "icon": FileUploadIconType;
        "state": FileUploadStates;
    }
    interface GbHeaderIcon {
        "showIndicator": boolean;
        "state": StateEnum;
    }
    interface GbProgressBar {
        "el": HTMLElement;
        "labelPosition": 'right' | 'bottom' | 'top_floating' | 'bottom_floating';
        "progress": number;
        "showLabel": boolean;
    }
    interface GbProgressCircle {
        "label": boolean;
        "progress": number;
        "shape": 'circle' | 'half_circle';
        "size": GeneralSizes;
    }
    interface GbStatusIndicator {
        "indicatorStateClass": string;
        "size": GeneralSizes;
        "state": OnlineIndicatorStates;
        "statusIcon": string;
    }
    interface GbToggle {
        "size": GeneralSizes;
        "state": StateEnum;
        "supportingText": boolean;
    }
    interface GbToggleBase {
        "size": GeneralSizes;
        "state": StateEnum;
    }
    interface GbTooltip {
        "arrow": ArrowPositions;
        "supportingText": boolean;
    }
    interface TestButton {
        "destructive": boolean;
        "hierarchy": GeneralHierarchies;
        "icon": 'default' | 'only';
        "iconLeading": boolean;
        "iconLeadingSwap": string;
        "iconTrailing": boolean;
        "iconTrailingSwap": string;
        "size": GeneralSizes;
        "state": 'default' | 'hover' | 'disabled' | 'pressed';
    }
}
declare global {
    interface HTMLGbAvatarElement extends Components.GbAvatar, HTMLStencilElement {
    }
    var HTMLGbAvatarElement: {
        prototype: HTMLGbAvatarElement;
        new (): HTMLGbAvatarElement;
    };
    interface HTMLGbAvatarAddButtonElement extends Components.GbAvatarAddButton, HTMLStencilElement {
    }
    var HTMLGbAvatarAddButtonElement: {
        prototype: HTMLGbAvatarAddButtonElement;
        new (): HTMLGbAvatarAddButtonElement;
    };
    interface HTMLGbAvatarContrastInnerBorderElement extends Components.GbAvatarContrastInnerBorder, HTMLStencilElement {
    }
    var HTMLGbAvatarContrastInnerBorderElement: {
        prototype: HTMLGbAvatarContrastInnerBorderElement;
        new (): HTMLGbAvatarContrastInnerBorderElement;
    };
    interface HTMLGbAvatarGroupElement extends Components.GbAvatarGroup, HTMLStencilElement {
    }
    var HTMLGbAvatarGroupElement: {
        prototype: HTMLGbAvatarGroupElement;
        new (): HTMLGbAvatarGroupElement;
    };
    interface HTMLGbAvatarLabelGroupElement extends Components.GbAvatarLabelGroup, HTMLStencilElement {
    }
    var HTMLGbAvatarLabelGroupElement: {
        prototype: HTMLGbAvatarLabelGroupElement;
        new (): HTMLGbAvatarLabelGroupElement;
    };
    interface HTMLGbAvatarProfilePhotoElement extends Components.GbAvatarProfilePhoto, HTMLStencilElement {
    }
    var HTMLGbAvatarProfilePhotoElement: {
        prototype: HTMLGbAvatarProfilePhotoElement;
        new (): HTMLGbAvatarProfilePhotoElement;
    };
    interface HTMLGbButtonElement extends Components.GbButton, HTMLStencilElement {
    }
    var HTMLGbButtonElement: {
        prototype: HTMLGbButtonElement;
        new (): HTMLGbButtonElement;
    };
    interface HTMLGbButtonCloseElement extends Components.GbButtonClose, HTMLStencilElement {
    }
    var HTMLGbButtonCloseElement: {
        prototype: HTMLGbButtonCloseElement;
        new (): HTMLGbButtonCloseElement;
    };
    interface HTMLGbCheckboxElement extends Components.GbCheckbox, HTMLStencilElement {
    }
    var HTMLGbCheckboxElement: {
        prototype: HTMLGbCheckboxElement;
        new (): HTMLGbCheckboxElement;
    };
    interface HTMLGbCheckboxBaseElement extends Components.GbCheckboxBase, HTMLStencilElement {
    }
    var HTMLGbCheckboxBaseElement: {
        prototype: HTMLGbCheckboxBaseElement;
        new (): HTMLGbCheckboxBaseElement;
    };
    interface HTMLGbCheckboxGroupElement extends Components.GbCheckboxGroup, HTMLStencilElement {
    }
    var HTMLGbCheckboxGroupElement: {
        prototype: HTMLGbCheckboxGroupElement;
        new (): HTMLGbCheckboxGroupElement;
    };
    interface HTMLGbCollapseButtonElement extends Components.GbCollapseButton, HTMLStencilElement {
    }
    var HTMLGbCollapseButtonElement: {
        prototype: HTMLGbCollapseButtonElement;
        new (): HTMLGbCollapseButtonElement;
    };
    interface HTMLGbFileTypeIconElement extends Components.GbFileTypeIcon, HTMLStencilElement {
    }
    var HTMLGbFileTypeIconElement: {
        prototype: HTMLGbFileTypeIconElement;
        new (): HTMLGbFileTypeIconElement;
    };
    interface HTMLGbFileUploadElement extends Components.GbFileUpload, HTMLStencilElement {
    }
    var HTMLGbFileUploadElement: {
        prototype: HTMLGbFileUploadElement;
        new (): HTMLGbFileUploadElement;
    };
    interface HTMLGbFileUploadItemBaseElement extends Components.GbFileUploadItemBase, HTMLStencilElement {
    }
    var HTMLGbFileUploadItemBaseElement: {
        prototype: HTMLGbFileUploadItemBaseElement;
        new (): HTMLGbFileUploadItemBaseElement;
    };
    interface HTMLGbHeaderIconElement extends Components.GbHeaderIcon, HTMLStencilElement {
    }
    var HTMLGbHeaderIconElement: {
        prototype: HTMLGbHeaderIconElement;
        new (): HTMLGbHeaderIconElement;
    };
    interface HTMLGbProgressBarElement extends Components.GbProgressBar, HTMLStencilElement {
    }
    var HTMLGbProgressBarElement: {
        prototype: HTMLGbProgressBarElement;
        new (): HTMLGbProgressBarElement;
    };
    interface HTMLGbProgressCircleElement extends Components.GbProgressCircle, HTMLStencilElement {
    }
    var HTMLGbProgressCircleElement: {
        prototype: HTMLGbProgressCircleElement;
        new (): HTMLGbProgressCircleElement;
    };
    interface HTMLGbStatusIndicatorElement extends Components.GbStatusIndicator, HTMLStencilElement {
    }
    var HTMLGbStatusIndicatorElement: {
        prototype: HTMLGbStatusIndicatorElement;
        new (): HTMLGbStatusIndicatorElement;
    };
    interface HTMLGbToggleElement extends Components.GbToggle, HTMLStencilElement {
    }
    var HTMLGbToggleElement: {
        prototype: HTMLGbToggleElement;
        new (): HTMLGbToggleElement;
    };
    interface HTMLGbToggleBaseElement extends Components.GbToggleBase, HTMLStencilElement {
    }
    var HTMLGbToggleBaseElement: {
        prototype: HTMLGbToggleBaseElement;
        new (): HTMLGbToggleBaseElement;
    };
    interface HTMLGbTooltipElement extends Components.GbTooltip, HTMLStencilElement {
    }
    var HTMLGbTooltipElement: {
        prototype: HTMLGbTooltipElement;
        new (): HTMLGbTooltipElement;
    };
    interface HTMLTestButtonElement extends Components.TestButton, HTMLStencilElement {
    }
    var HTMLTestButtonElement: {
        prototype: HTMLTestButtonElement;
        new (): HTMLTestButtonElement;
    };
    interface HTMLElementTagNameMap {
        "gb-avatar": HTMLGbAvatarElement;
        "gb-avatar-add-button": HTMLGbAvatarAddButtonElement;
        "gb-avatar-contrast-inner-border": HTMLGbAvatarContrastInnerBorderElement;
        "gb-avatar-group": HTMLGbAvatarGroupElement;
        "gb-avatar-label-group": HTMLGbAvatarLabelGroupElement;
        "gb-avatar-profile-photo": HTMLGbAvatarProfilePhotoElement;
        "gb-button": HTMLGbButtonElement;
        "gb-button-close": HTMLGbButtonCloseElement;
        "gb-checkbox": HTMLGbCheckboxElement;
        "gb-checkbox-base": HTMLGbCheckboxBaseElement;
        "gb-checkbox-group": HTMLGbCheckboxGroupElement;
        "gb-collapse-button": HTMLGbCollapseButtonElement;
        "gb-file-type-icon": HTMLGbFileTypeIconElement;
        "gb-file-upload": HTMLGbFileUploadElement;
        "gb-file-upload-item-base": HTMLGbFileUploadItemBaseElement;
        "gb-header-icon": HTMLGbHeaderIconElement;
        "gb-progress-bar": HTMLGbProgressBarElement;
        "gb-progress-circle": HTMLGbProgressCircleElement;
        "gb-status-indicator": HTMLGbStatusIndicatorElement;
        "gb-toggle": HTMLGbToggleElement;
        "gb-toggle-base": HTMLGbToggleBaseElement;
        "gb-tooltip": HTMLGbTooltipElement;
        "test-button": HTMLTestButtonElement;
    }
}
declare namespace LocalJSX {
    interface GbAvatar {
        "icon"?: 'user';
        "placeholder"?: boolean;
        "size"?: GeneralSizes;
        "state"?: OnlineIndicatorStates;
        "statusIcon"?: string;
        "text"?: boolean;
        "weight"?: BorderWeights;
    }
    interface GbAvatarAddButton {
        "el"?: HTMLElement;
        "showToolTip"?: boolean;
        "size"?: GeneralSizes;
        "state"?: StateEnum;
    }
    interface GbAvatarContrastInnerBorder {
        "size"?: GeneralSizes;
        "weight"?: BorderWeights;
    }
    interface GbAvatarGroup {
        "addMoreButton"?: boolean;
        "moreUsers"?: boolean;
        "size"?: GeneralSizes;
        "state"?: StateEnum;
        "text"?: boolean;
    }
    interface GbAvatarLabelGroup {
        "placeholder"?: boolean;
        "size"?: GeneralSizes;
        "state"?: OnlineIndicatorStates;
        "statusIcon"?: string;
        "text"?: boolean;
    }
    interface GbAvatarProfilePhoto {
        "icon"?: string;
        "placeholder"?: boolean;
        "size"?: GeneralSizes;
        "text"?: boolean;
        "verified"?: boolean;
    }
    interface GbButton {
        "destructive"?: boolean;
        "hierarchy"?: GeneralHierarchies;
        "icon"?: 'default' | 'only';
        "iconLeading"?: boolean;
        "iconLeadingSwap"?: string;
        "iconTrailing"?: boolean;
        "iconTrailingSwap"?: string;
        "size"?: GeneralSizes;
        "state"?: StateEnum;
    }
    interface GbButtonClose {
        "color"?: 'primary' | 'information' | 'success' | 'gray' | 'warning' | 'error';
        "size"?: GeneralSizes;
        "type"?: 'pill_color' | 'pill_outline' | 'badge_color' | 'badge_modern';
    }
    interface GbBadgeClose {
        "color"?: GeneralColors;
        "type"?: 'square' | 'rounded';
    }
    interface GbCheckbox {
        "checked"?: boolean;
        "indeterminate"?: boolean;
        "size"?: GeneralSizes;
        "state"?: StateEnum;
        "supportingText"?: boolean;
        "type"?: CheckBoxVariants;
    }
    interface GbCheckboxBase {
        "checked"?: boolean;
        "indeterminate"?: boolean;
        "size"?: GeneralSizes;
        "state"?: StateEnum;
        "type"?: CheckBoxVariants;
    }
    interface GbCheckboxGroup {
        "breakpoint"?: BreakPoints;
        "icon"?: string;
        "selected"?: boolean;
        "size"?: GeneralSizes;
        "type"?: 'icon_simple' | 'avatar' | 'payment_icon' | 'radio_button' | 'checkbox';
    }
    interface GbCollapseButton {
        "color"?: 'grey' | 'white';
        "currentIconDirection"?: string;
        "isHovered"?: boolean;
    }
    interface GbFileTypeIcon {
    }
    interface GbFileUpload {
        "buttonState"?: StateEnum;
        "destructive"?: boolean;
        "heightSize"?: GeneralSizes;
        "icon"?: FileUploadIconType;
        "showLabel"?: boolean;
        "state"?: FileUploadStates;
        "type"?: 'single' | 'multiple';
    }
    interface GbFileUploadItemBase {
        "buttonState"?: StateEnum;
        "fileType"?: 'pdf' | 'png' | 'jpg' | 'doc' | 'mp4';
        "heightSize"?: GeneralSizes;
        "icon"?: FileUploadIconType;
        "state"?: FileUploadStates;
    }
    interface GbHeaderIcon {
        "showIndicator"?: boolean;
        "state"?: StateEnum;
    }
    interface GbProgressBar {
        "el"?: HTMLElement;
        "labelPosition"?: 'right' | 'bottom' | 'top_floating' | 'bottom_floating';
        "progress"?: number;
        "showLabel"?: boolean;
    }
    interface GbProgressCircle {
        "label"?: boolean;
        "progress"?: number;
        "shape"?: 'circle' | 'half_circle';
        "size"?: GeneralSizes;
    }
    interface GbStatusIndicator {
        "indicatorStateClass"?: string;
        "size"?: GeneralSizes;
        "state"?: OnlineIndicatorStates;
        "statusIcon"?: string;
    }
    interface GbToggle {
        "size"?: GeneralSizes;
        "state"?: StateEnum;
        "supportingText"?: boolean;
    }
    interface GbToggleBase {
        "size"?: GeneralSizes;
        "state"?: StateEnum;
    }
    interface GbTooltip {
        "arrow"?: ArrowPositions;
        "supportingText"?: boolean;
    }
    interface TestButton {
        "destructive"?: boolean;
        "hierarchy"?: GeneralHierarchies;
        "icon"?: 'default' | 'only';
        "iconLeading"?: boolean;
        "iconLeadingSwap"?: string;
        "iconTrailing"?: boolean;
        "iconTrailingSwap"?: string;
        "size"?: GeneralSizes;
        "state"?: 'default' | 'hover' | 'disabled' | 'pressed';
    }
    interface IntrinsicElements {
        "gb-avatar": GbAvatar;
        "gb-avatar-add-button": GbAvatarAddButton;
        "gb-avatar-contrast-inner-border": GbAvatarContrastInnerBorder;
        "gb-avatar-group": GbAvatarGroup;
        "gb-avatar-label-group": GbAvatarLabelGroup;
        "gb-avatar-profile-photo": GbAvatarProfilePhoto;
        "gb-button": GbButton;
        "gb-button-close": GbButtonClose;
        "gb-checkbox": GbCheckbox;
        "gb-checkbox-base": GbCheckboxBase;
        "gb-checkbox-group": GbCheckboxGroup;
        "gb-collapse-button": GbCollapseButton;
        "gb-file-type-icon": GbFileTypeIcon;
        "gb-file-upload": GbFileUpload;
        "gb-file-upload-item-base": GbFileUploadItemBase;
        "gb-header-icon": GbHeaderIcon;
        "gb-progress-bar": GbProgressBar;
        "gb-progress-circle": GbProgressCircle;
        "gb-status-indicator": GbStatusIndicator;
        "gb-toggle": GbToggle;
        "gb-toggle-base": GbToggleBase;
        "gb-tooltip": GbTooltip;
        "test-button": TestButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gb-avatar": LocalJSX.GbAvatar & JSXBase.HTMLAttributes<HTMLGbAvatarElement>;
            "gb-avatar-add-button": LocalJSX.GbAvatarAddButton & JSXBase.HTMLAttributes<HTMLGbAvatarAddButtonElement>;
            "gb-avatar-contrast-inner-border": LocalJSX.GbAvatarContrastInnerBorder & JSXBase.HTMLAttributes<HTMLGbAvatarContrastInnerBorderElement>;
            "gb-avatar-group": LocalJSX.GbAvatarGroup & JSXBase.HTMLAttributes<HTMLGbAvatarGroupElement>;
            "gb-avatar-label-group": LocalJSX.GbAvatarLabelGroup & JSXBase.HTMLAttributes<HTMLGbAvatarLabelGroupElement>;
            "gb-avatar-profile-photo": LocalJSX.GbAvatarProfilePhoto & JSXBase.HTMLAttributes<HTMLGbAvatarProfilePhotoElement>;
            "gb-button": LocalJSX.GbButton & JSXBase.HTMLAttributes<HTMLGbButtonElement>;
            "gb-button-close": LocalJSX.GbButtonClose & JSXBase.HTMLAttributes<HTMLGbButtonCloseElement>;
            "gb-checkbox": LocalJSX.GbCheckbox & JSXBase.HTMLAttributes<HTMLGbCheckboxElement>;
            "gb-checkbox-base": LocalJSX.GbCheckboxBase & JSXBase.HTMLAttributes<HTMLGbCheckboxBaseElement>;
            "gb-checkbox-group": LocalJSX.GbCheckboxGroup & JSXBase.HTMLAttributes<HTMLGbCheckboxGroupElement>;
            "gb-collapse-button": LocalJSX.GbCollapseButton & JSXBase.HTMLAttributes<HTMLGbCollapseButtonElement>;
            "gb-file-type-icon": LocalJSX.GbFileTypeIcon & JSXBase.HTMLAttributes<HTMLGbFileTypeIconElement>;
            "gb-file-upload": LocalJSX.GbFileUpload & JSXBase.HTMLAttributes<HTMLGbFileUploadElement>;
            "gb-file-upload-item-base": LocalJSX.GbFileUploadItemBase & JSXBase.HTMLAttributes<HTMLGbFileUploadItemBaseElement>;
            "gb-header-icon": LocalJSX.GbHeaderIcon & JSXBase.HTMLAttributes<HTMLGbHeaderIconElement>;
            "gb-progress-bar": LocalJSX.GbProgressBar & JSXBase.HTMLAttributes<HTMLGbProgressBarElement>;
            "gb-progress-circle": LocalJSX.GbProgressCircle & JSXBase.HTMLAttributes<HTMLGbProgressCircleElement>;
            "gb-status-indicator": LocalJSX.GbStatusIndicator & JSXBase.HTMLAttributes<HTMLGbStatusIndicatorElement>;
            "gb-toggle": LocalJSX.GbToggle & JSXBase.HTMLAttributes<HTMLGbToggleElement>;
            "gb-toggle-base": LocalJSX.GbToggleBase & JSXBase.HTMLAttributes<HTMLGbToggleBaseElement>;
            "gb-tooltip": LocalJSX.GbTooltip & JSXBase.HTMLAttributes<HTMLGbTooltipElement>;
            "test-button": LocalJSX.TestButton & JSXBase.HTMLAttributes<HTMLTestButtonElement>;
        }
    }
}
